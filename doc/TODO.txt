CMCF Laboratory Information Management System Work Items
========================================================

Preamble
--------
- Existing lims code will be provided.
- Code to be developed using the Django platform
- Will be deployed on Apache 2+ using Django >= 1.0 (either mod_python or mod_wsgi). Static files will be served by Apache directly
- As much of the new functionality as possible should be abstracted into separate django apps, with changes made to the existing code limited to those necessary to integrate them
- Templates should be packaged with their applications according to the standard practice within the django community. More effort should be placed on functionality and flexibility than look-and-feel, since those can be changed.

Required Changes to existing Django Applications
------------------------------------------------
- lims-portal: (for users)
    1) ability to load excel and csv spreadsheet and automatically populate tables for (crystals, containers, dewars, experiments, and one shipment per spreadsheet). Sample spreadsheet to be provided but format can be changed to a limited degree to assist the development.
    2) ability to generate equivalent spreadsheet like in (a) for a shipment currently in the system for download by the user in csv and excel formats. Produced spreadsheet should be readable by the feature in (a) to generate identical information in the database.
    3) ability to generate a PDF "packing-list" file for each shipment containing the list of crystals, containers, dewars. The PDF file should include a CODE-128 Barcode corresponding to the shipment ID at the top. The file should include information about the laboratory address, contact information, and the shipment details such as date shipped, carrier etc.
    4) Update "Send" functionality so that:
        a)  Only draft shipments can be sent, edited or deleted by the project user. 
        b) Deleting a shipment should orphan it's children rather than removing them from the database. 
        c) Add the ability to close a shipment. Closing a shipment should close and archive all it's children. Except, "Cocktails","Constituents" and "CrystalForms" which are never closed. 
        d) When a user clicks send, the shipment is validated against the following: 
            - No dewars can be empty, 
            - No containers can be empty
            - each crystal in the shipment must be linked to at least one experiment, otherwise request confirmation and generate a default "native, screen and confirm" experiment, including all orphaned crystals.
        e) Set the status of the shipment to "sent"
        f) If the shipment validates, generate a PDF of as in (3) and ask the user to print it and include in one of the dewars.
    5) General record life-cycle for crystals, containers, dewars, experiments requests and shipments with the following features
        a) Ideally, each instance of those types of objects exists in an active state within the database for users/staff to manipulate. At some point, the objects become inactive and are only useful for historical purposes and are not normally available on "object-lists" except explicitly requested, and also not editable or deletable by users.
        b) Extend the current "ActivityLog" functionality to be able to display a history of changes for each object.
    6) Change Experiment and/or Crystal such that it is possible to prioritize the experiments within each shipment.
    7) Change Crystal such that it is possible to prioritize the crystals within each experiment
    8) Maybe - integrate django-reversion, so objects can be reverted to previous versions and modify ActivityLog so that it uses post-save and login signals. Activity log may be moved into a separate application.
    9) Modify all models so that row-level ownership is enforced by retrieving data through custom managers. This will simplify the views code.
    10) Modify container editing so that the "kind" of a cassette can not be changed if there are any crystals associated with it.
    11) Add strategy view, verification and resubmission for crystals as follows:
        a) each screening result is linked to a associated strategy. The strategy for screening results is editable by the user and will be used for data collection. The strategy for data-collection is for information only and not editable by the user.
        b) Each strategy can be in one of several states "Accepted","Rejected", "Waiting", "Collected". Strategies linked to "confirm" experiments will have their states set to "Waiting". The user will have the option to switch the state to "accept" or "reject" the strategy. At this point they can also modify the strategy parameters.
        e) "Collected" strategies are only associated with data-collection results and can not be modified by the user once created.
    12) Remove desired_low_res from Experiment requests, add delta_phi, total_angle. Also add an additional Experiment Plan, called "Just Collect" work similarly to "Screen and Collect" except, it will use predifined values for delta_phi total_angle and resolution as opposed to just using those values for guidance.
        
Required additional Django Applications or features
---------------------------------------------------
- authentication:
    1) ability to authenticate users through Active Directory and LDAP
    2) If user profile does not exist at first authentication, create profile using information to be obtained from remote xmlrpc/jsonrpc server. Format and content of information to be worked out, as the remote server is also being developed. This aspect should be developed with the assumption that the API and or format may change. To get going you could just create a dummy xmlrpc/jsonrpc server which provides information you need.
    3) When users are authenticated their home page should be their lims-portal. When Staff members are authenticated, their home page should be the staff-portal.

- data download:
    1) ability for users to download a large tar archive of data stored on a different server than the web-server, using the same credentials they used to authenticate. Data should only be accessible to the authenticated user. Users should not be able to see or download other's data.
    
- staff-portal: (for staff) Separate from the lims portal, although some of the views can be reused where it simplifies the development.
    1) shipment handling:
        a) Staff should be able to see all shipments "sent", "on-site" and "returned" shipments and be able to drill down the full hierarchy of contents including results for crystals.
        b) Staff should be able to "receive" a shipment. The receiving screen should permit input of the shipping ID through a barcode-reader and also input of information about condition of the shipment on reception, comments about actions taken and storage location. 
        c) staff-portal should have simple inventory management to manage storage of shipments so that location of shipment on site can be determined using the shipment id.
        d) Staff should be able to "return" a shipment. Clicking "return" on the shipment page should check that all associated experiments have been performed and if not request confirmation to send-anyway. If confirmed, the shipment state should be updated to "returned".
    2) experiment scheduling:
        a) ability for staff to see a list of all un-performed or incomplete experiments linked to shipments "on-site" and prioritize the list by re-ordering the elements in the list to heart's content.
        b) ability for staff to create and save a run-list of containers from the list in (a). Creation of the run-list should be constrained by the following
            i) Two types of run-lists should be possible: "Automated" and "Manual". "Manual" lists should have no constraints
            ii) "Automated" lists should not contain more items than can be mounded in the Automounter at once. The primary determinants are the type of containers. For example, the automounter has three stalls, each of which can take either one Cassette or up to 4 pucks. No other container type is allowed for the automated mode so experiments linked to samples stored in other container types should not be available to be added to "Automated" lists. The other constraint is that as many samples as possible should be mounted in the automounter at once. More explanation as required here ...
        c) ability for staff to generate a list of containers from the list in (b). This list should include information about which dewar contains the container, and where in the storage, the dewar is located.
        d) each "run-list" when created will have a "pending" status. The ability for the status to be changed to "loaded" or "complete", by staff is also needed.
        e) provide an xmlrpc/jsonrpc interface for requesting an expanded version of the "run-list". An expanded version of the run-list is simply a run-list with each container expanded into the individual samples respecting the previously set priorities.
    3) results-verification:
        a) ability for staff to see a list of all "completed" run-lists and be able to drill down to the results of individual experiments.
        b) ability for staff to "accept" or "reject" a completed run-list. "Accepted"  run-lists should automatically change status to "closed" and one message should be sent to each project owner who has an experiment in the run-list. The detailed contents of the message should be configurable. "Rejected" run-lists should again become "pending"
    4) status-inspection:
        a) TBD
        
        
        
        
