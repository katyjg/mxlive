To deploy the test environment do the following:
------------------------------------------------
1. Copy settings_local.py.example iin the "local/" folder to settings_local.py and customize it according to your
   environment
2. Run ./manage.py collectstatic from the top-level directory (not needed with Docker)
3. Copy mxlive.crontasks to /etc/cron.d and edit it to make sure the path to
   manage.py and the interval is meaningful for the deployment (use docker exec if using Docker)
4. Put server.key and server.crt into the local/certs directory or run the following command
   in the directory to generate self signed keys

5. Run ./manage.py syncdb --noinput
6. Run ./manage.py runserver 0.0.0.0:8000
7. Connect your browser to http://localhost:8000 and log when prompted. Make sure your LDAP server is running first.

To deploy a full production production environment including docker, mail-relay, ldap, database:
------------------------------------------------------------------------------------------------
1. Build the docker image with the command

    sudo docker build --rm -t mxlive:latest .

2. Create a directory called MxLIVE somewhere else, preferrably where you place your other persistent docker files
   (e.g. /apps/docker/mxlive), then create the following directory structure within it:

    ├── docker-compose.yml       # The docker compose configuration file for the deployment copy from deploy/ and customize
    ├── app/                     # The top local directory level directory for MxLIVE Container
    │   ├── settings_local.py    # MxLIVE local settings file copy from local/ and customize it
    │   ├── cache/               # Cache directory for MxLIVE
    │   ├── certs/               # Server certificates for the MxLIVE Web Server
    │   ├── logs/                # Log files for MxLIVE Web Server will be placed here
    │   └── media/               # media files for MxLIVE
    ├── database/                # Data directory for MySQL Container (Omit this if you are using and external database server)
    └── ldap/                    # Data directory for 389ds Container (Omit this if you are using and external directory server)
        ├── certs/               # Server certificates for the 389ds Server
        ├── config/              # Config directory for 389ds
        ├── data/                # Data directory for 389ds
        └── logs/                # Logs directory for 389ds

    NOTE:
    - You can find more information about MySQL at https://hub.docker.com/_/mariadb/
    - You can find more information about 389ds at https://hub.docker.com/r/minkwe/389ds/

    a tar archive containing an empty directory structure like this can be found in "deploy/skel.tar.gz"

3. Customize docker-compose.yml according to your environment. If using external database, mail and directory servers,
   remove the corresponding entries, and also delete the corresponding links within the app entry.

4. Update settings_local.py according to your environment

5. Change to the top level directory which contains docker-compose.yml Launch the services using the following command:

        sudo docker-compose up -d

   To monitor the logs use the command:

        docker-compose logs -f
6. Done! After a few seconds all your services should be up and ready. You can then connect to mxlive on

   https://localhost/

   Your local host will also be serving as an ldap server for authentication by other hosts at this time if you configured
   the local LDAP option above.

NOTE: You can quickly generate self-signed certificates using the following command

   openssl req -nodes -x509 -newkey rsa:4096 -keyout server.key -out server.crt -days 356 \
           -subj "/C=CA/ST=Saskatchewan/L=Saskatoon/O=CLS/CN=*.example.com"
