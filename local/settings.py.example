# Local Timezone
TIME_ZONE = 'America/Regina'

# Internal Access Settings
TRUSTED_IPS = ['127.0.0.1/32']
TRUSTED_PROXIES = 1

# Downloads
RESTRICT_DOWNLOADS = False
DOWNLOAD_PROXY_URL = "http://mxlive-data/download"

# Shift parameters
HOURS_PER_SHIFT = 8

# Schedule App settings
LIMS_USE_SCHEDULE = True
FACILITY_MODES = "https://external.beam.mode.src"
""" FACILITY_MODES should reference an API that returns a JSON list containing a dictionary for each mode, with fields:
    - "start": string formatted date matching %Y-%m-%dT%H:%M:%SZ
    - "end": string formatted date matching %Y-%m-%dT%H:%M:%SZ
    - "kind": code to use for CSS class for styling (built-in codes include N, NS, D, X, M, MV, M0, MT, DS, DST, DS-CSR)
"""

# LDAP Server Settings
LDAP_BASE_DN = 'dc=example,dc=com'
LDAP_ADMIN_UIDS      = [1000]
LDAP_SERVER_URI = 'dc=example,dc=com'
LDAP_MANAGER_DN = 'cn=Directory Manager'
LDAP_MANAGER_SECRET = '********'
LDAP_USER_TABLE = 'ou=People'
LDAP_USER_ROOT = '/users'
LDAP_GROUP_TABLE = 'ou=Groups'
LDAP_USER_SHELL = '/bin/bash'
LDAP_SEND_EMAILS = False

# LDAP Authentication Settings
LDAP_AUTH_URL = "ldap://{}:389".format(LDAP_SERVER_URI)
LDAP_AUTH_SEARCH_BASE = "{},{}".format(LDAP_USER_TABLE, LDAP_BASE_DN)
LDAP_AUTH_OBJECT_CLASS = "posixAccount"
LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)
LDAP_AUTH_USE_TLS = True
LDAP_AUTH_USER_FIELDS = {
    "username": "uid",
    "first_name": "givenName",
    "last_name": "sn",
    "email": "mail",
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mxlive',
        'USER': 'mxlive',
        'PASSWORD': '4dafa320isd93kjdls1829dd',
        'HOST': 'mxlive-db',
        'PORT': '5432'
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'KEY_FUNCTION': 'mxlive.utils.cache.make_key',
        'LOCATION': 'mxlive-cache:11211',
    }
}

# Publications App Settings
LIMS_USE_PUBLICATIONS = True
PDB_FACILITY_ACRONYM = 'CLSI'
GOOGLE_API_KEY = 'Fa9googleFapi43keyRBasd9g32jaJHD9032Ksab'
CONTACT_EMAIL = 'beamline.contact@beamline.ca'

def clsi_beamline_tags(entry):
    """
    Generate proper CLSI beamline tags for publications
    :param entry: the entry from the PDB report
    :return: a list of tag names
    """

    acronym = entry['diffractionSource'].split()[-1]
    acronyms = {
        '08ID-1': ['CMCF-ID'],
        '08ID-2': ['CMCF-ID'],
        '08B1-1': ['CMCF-BM'],
        'CLSI': ['CMCF-ID', 'CMCF-BM',],
    }
    return acronyms.get(acronym, [])

PDB_TAG_FUNCTION = clsi_beamline_tags